//Class - некий чертеж, по которому создаются объекты

//Это паттерн плох по нескольким причинам
//1 - это код показывает детали того как мы формируем связи между объектами, вместо того что бы показывать смысл, а смысл очень прост:
//- у всех объектов типа Animal должно быть имя(name)и голос(voice), кроме того у всех объектов должна быть функция say
//2 - наследование и управление цепочкой прототипов. Работая с прототипами на прямую, код для вызова функции выше по цепочки прототипов выглядел слишком сложно и слишком грамостко 

// function Animal (name, voice) {
//     this.name = name;
//     this.voice = voice;
// };

// //У каждой обычной функции в JS есть свойство prototype изначально - пустой объект

// Animal.prototype.say = function () {
//     console.log(this.name, 'goes', this.voice);
// };

// const dog = new Animal('Dog', 'woof');
// const cat = new Animal('Cat', 'meow');

// dog.say();//Dog goes woof
// cat.say();//Cat goes meow

//Код выше можно записать с помощью синтаксиса ES2015

class Animal {
    
    constructor (name, voice) {
        this.name = name;
        this.voice = voice;
    }

    say () {
        console.log(this.name, 'goes', this.voice);
    }

};

//Создадим новый class птиц
//Ключевое слово extends используется в  объявлении класса или в  выражениях класса для создания дочернего класса.
//Ключевое слово extends может быть использовано для создания дочернего класса для уже существующего класса или встроенного объекта.
class Bird extends Animal {
    //Если вы этом конструкторе это класс наследует какой нибудь другой класс, мы обязательно должны вызвать конструтор суперКласса явно, при помощи ключевого слова super 
    constructor(name, voice, canFly) {
        super(name, voice);
        super.say();
        this.canFly = canFly;
    }
    say () {
        console.log('Birds dont\'t to talk');
    }
}

//Мы можем полностью преопределить функцию say для класса Bird, просто создавая функцию в теле класса

//Ключевое слово super дает доступ не только к суперКонструктору, но и к любому методу объявленном в суперКлассе, с помощью super можно обратиться к методу say

//Создадим объект duck
const duck = new Bird('Duck', 'quack', true);
//Протоипом duck будет Bird.prototype, а его прототипом будет Animal.prototype, а его прототипом будет Object.prototype, а его прототипом будет null
duck.say();//Duck goes quack

//Добавляем дополнительные возможности в конструктор Bird(смотри выше)
























